worker_processes 1;

events {

    worker_connections 1024;

}

http {

    sendfile on;

    gzip              on;
    gzip_http_version 1.0;
    gzip_proxied      any;
    gzip_min_length   500;
    gzip_disable      "MSIE [1-6]\.";
    gzip_types        text/plain;


    error_log /var/log/nginx/error_log.log error;
    error_log /var/log/nginx/warning.log warn;
    access_log /var/log/nginx/access_log.log combined;
    upstream app_server {
         server 127.0.0.1:8080;
    }

    server {
        listen 91;
            
        location / {
            proxy_pass         http://app_server;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   Accept-Encoding "";
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;

            content_by_lua_block {
                local json = require "cjson"
                local request = {}
                ngx.req.read_body()
                local request_headers = ngx.req.get_headers()
                request["headers"] = request_headers
                request["url"] = ngx.var.http_host..ngx.var.request_uri
                request["request"] = ngx.var.scheme.."://".. ngx.var.http_host..ngx.var.request_uri 
                request["method"] = ngx.req.get_method()
                request["get_args"] = ngx.req.get_uri_args()
                request["post_args"] = ngx.req.get_post_args()
                request["remote_addr"] = ngx.var.remote_addr


                local request_body = ngx.req.get_body_data()
                request["body"] = request_body
                request["time"] = ngx.now()

                ngx.say(json.encode(request))
                ngx.log(ngx.WARN, json.encode(request))
            }
        }
    }
}
